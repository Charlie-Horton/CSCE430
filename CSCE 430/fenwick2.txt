/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>
#include <iostream>
/*
string parsing
use array initialize as 0 of max size

functions: initialize array to 0
            flip bit
            query 1s and display results
*/
using namespace std;


int startingIndexOfFenwick(int i){ //return i-LSOne(i)+1
    int lsOne = i & -i;
    return (i-lsOne+1);
}
int bCompliment(int b, int mem[], int* sum){
    if(b == 0){
        return 0;
    }
    int startAt = startingIndexOfFenwick(b);
    int finishAt = b;
    
    for(;startAt <= finishAt; startAt++){
        (*sum) += mem[startAt];
    }
    b = b - (b & -b);
    bCompliment(b, mem, sum);
}
int query(int l, int r, int a, int b, int k, int* sum){
    if(a==l && b==r){
        return *sum += mem[k];
    }
    else if(b <= (l+r)/2 && a < (l+r)/2){
        query(l, (l+r)/2, a, b, 2*k);    
    }
    else if(a >= (l+r)/2 && b > (l+r)/2){
        query(((l+r)/2)+1, r, a, b, 2*k+1);
    }
    else {
        query(l, (l+r)/2, a, (l+r)/2, 2*k);
        query(((l+r)/2)+1, r, ((l+r)/2)+1, b, 2*k+1);
    }
}
void update(int updateLocation, int sizeOfArray, int numToAdd, int mem[]){
    while(updateLocation <= sizeOfArray){
        mem[updateLocation] += numToAdd;
        updateLocation = updateLocation + (updateLocation & (-updateLocation));
    }
}
int main()
{
    cout << startingIndexOfFenwick(12) << endl;
    int sum1 = 0;
    int sum2 = 0;
    /* int mem[15] = {0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1};
    bCompliment(12, mem, &sum1);
    bCompliment(5, mem, &sum2);
    cout << sum1 - sum2;
    */
    
    int* mem; 
    int numBits, numQueries;
    cin >> numBits >> numQueries;
    mem = (int*)malloc(sizeof(int)*(numBits)*4+1);
    
    for(int i = 0; i < numBits*4+1; i++){
        mem[i] = 0;
    }
    char command;
    int l, r, flipIndex;
    for(int i = 0; i < numQueries; i++){
        cin >> command;
        
        if(command == 'F'){
            cin >> flipIndex;
            mem[flipIndex]^=1;
        }
        else{
            cin >> l >> r;
            int countL = 0;
            int countR = 0;
            
            bCompliment(l, mem, &countL);
            bCompliment(r, mem, &countR);
            
            cout << countR - countL << endl;
        }
    }
    
    return 0;
}
